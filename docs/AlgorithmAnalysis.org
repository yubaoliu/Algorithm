* Algorithm
** Sorting Overview

*** Time Complexities of all Sorting Algorithms

|                | Best        | Average     | Worst       |
| Selection Sort | Ω(n^2)      | θ(n^2)      | O(n^2)      |
| Bubble Sort    | Ω(n)        | θ(n^2)      | O(n^2)      |
| Insertion Sort | Ω(n)        | θ(n^2)      | O(n^2)      |
| Heap Sort      | Ω(n log(n)) | θ(n log(n)) | O(n log(n)) |
| Quick Sort     | Ω(n log(n)) | θ(n log(n)) | O(n^2)      |
| Merge Sort     | Ω(n log(n)) | θ(n log(n)) | O(n log(n)) |
| Bucket Sort    | Ω(n+k)      | θ(n+k)      | O(n^2)      |
| Radix Sort     | Ω(nk)       | θ(nk)       | O(nk)       |
** Common Insertion Sort
*** Algorithm
#+BEGIN_SRC  cpp
// Sort an arr[] of size n
insertionSort(arr, n)
Loop from i = 1 to n-1.
……a) Pick element arr[i] and insert it into sorted sequence arr[0…i-1]
#+END_SRC
#+BEGIN_SRC cpp :tangle Insert-sort.cpp
void InsertionSort(ElementType arr[],int n)
{
  ElementType key,i,j;
  for( i=1; i< n; i++)//unsorted subarray, i:1->N-1
  {
    key=arr[i];

    for( j=i-1; j>=0 && key<=arr[j];j--)//sorted subarray, j:i->0
    {
      arr[j+1]=arr[j];
    }
    arr[j+1]=key;
  }
}
#+END_SRC
#+BEGIN_SRC python :tangle Insert-sort.py
def insertionSort(arr):
    for i in range(1, len(arr)):
        key=arr[i]
        j=i-1
    while j>=0 and key<arr[j]:
        arr[j+1]=arr[j]
        j-=1
    arr[j+1]=key
#+END_SRC
#+BEGIN_SRC java :tangle Insert-sort.java
class InsertionSort
{
  void sort(int arr[])
  {
    int n=arr.length;
    for(int i=1;i<n;++i)
    {
      int key=arr[i];
      int j=i-1;
      while(j>=0&& arr[j]>key)
      {
        arr[j+1]=arr[j];
        j=j-1;
      }
      arr[j+1]=key;
    }
  }
}
#+END_SRC
*** How to implement Insertion Sort for Linked List?
Below is simple insertion sort algorithm for linked list.

#+BEGIN_SRC cpp
1) Create an empty sorted (or result) list
2) Traverse the given list, do following for every node.
......a) Insert current node in sorted way in sorted or result list.
3) Change head of given linked list to head of sorted (or result) list. 
#+END_SRC

*** Complexity Analysis
Time Complexity: O(n*n)

Auxiliary Space: O(1)

** Binary Insertionsort
*** What is Binary Insertion Sort?
We can use binary search to reduce the number of comparisons in normal insertion sort. Binary Insertion Sort find use binary search to find the proper location to insert the selected item at each iteration. In normal insertion, sort it takes O(i) (at ith iteration) in worst case. we can reduce it to O(logi) by using binary search. The algorithm as a whole still has a running worst case running time of O(n2) because of the series of swaps required for each insertion. Refer [[http://www.geeksforgeeks.org/binary-insertion-sort/][this]] for implementation.


* Reference
1. [[http://interactivepython.org/courselib/static/pythonds/index.html][Problem Solving with Algorithms and Data Structures using Python]]
2. [[https://www.khanacademy.org/computing/computer-science/algorithms/][khanacademy-algorithms]]
3. [[http://www.geeksforgeeks.org/insertion-sort/][geeksforgeeks insertion sort]]
4. [[https://www.hackerearth.com/zh/practice/notes/sorting-and-searching-algorithms-time-complexities-cheat-sheet/][TimeComplexity Cheat Sheet for sorting and searching]]
